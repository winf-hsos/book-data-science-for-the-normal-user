[["index.html", "Data Science für normale Anwender*innen Übersicht Zielgruppe Didaktisches Konzept", " Data Science für normale Anwender*innen Prof. Dr. Nicolas Meseth Aktualisiert am 18.01.2022 Übersicht Zielgruppe Dieses Buch gibt eine Einführung in wichtige Themen bei der Arbeit mit Daten. Wie der Titel schon ahnen lässt, adressiert dieses Buch normale Anwender*innen. Damit meine ich Personen, die in ihrem beruflichen (oder privaten) Alltag von Kenntnissen in der Analyse von Daten (über Excel hinaus) profitieren, diese aber nicht deren Haupttätigkeit ist. In genau diese Zielgruppe fallen mehr als 95% der Studierenden, die an der Hochschule Osnabrück in jedem Semester an meinen Vorlesungen und Seminaren teilnehmen. Sie studieren einen Studiengang aus der Fachrichtung Agrar- oder Lebensmittelwirtschaft und haben in meinen Veranstaltungen die Möglichkeit, zusätzliche Kompetenzen zu digitalen Themen zu entwickeln. Sie arbeiten später aber nicht in IT-Berufen oder als Data Scientist. Sie sind aber dafür gerüstet, mit diesen Abteilungen (IT / Data Scientists) besser zusammenzuarbeiten und viele Dinge können sie auch in Eigenregie umsetzen. Dazu zählen beispielsweise Datenanalysen und -visualisierungen mit R. Didaktisches Konzept Das Buch ist in fortlaufend nummerierte Kapitel gegliedert. Man folgt meinem didaktischen Konzept, wenn man diese Reihenfolge einhält. Dieses Konzept beruht darauf, sich zuerst hands-on mit einem Thema auseinanderzusetzen, bevor die relevanen theoretischen Hintergründe eingeführt werden. Meiner Erfahrung nach sind theoretische Hintergründe einfacher zu verstehen, wenn das Subjekt der Betrachtung bereits in den Händen war. Der Kontext ist präsent und man weiß bei fachlichen Begriffen sofort die richtige Assoziation herzustellen. Ein zweiter wichtiger Gedanke beim didaktischen Aufbau des Buches ist die Verwendung von Beispielen aus der Praxis. Dazu zählen insbesodere Datensätze und Fragen an diese Daten. Jedes Kapitel beinhaltet Beispiele und Übungen mit Bezug zu Daten aus der Praxis. Die Anwendungsfälle hinter den Daten reichen von Onlineumfragen aus der Markforschung über Daten aus Laborexperimenten bis hin zu Datensätzen aus sozialen Medien wie Twitter. Alle Datensätze, die in diesem Buch verwendet werden, sind im Kapitel Datensätze gelistet. Nicht immer ist es sinnvoll, ein neues Konzept anhand eines Datensatzes aus der Praxis einzuführen. In diesem Fall greife ich auf synthetische Datensätze zurück, um die Idee oder das Konzept möglichst plastisch darstellen zu können. Die Anwendung des eingeführten Konzepts auf Datensätze aus der Praxis erfolgt dann anschließend. Es sollte in diesem Buch kein Konzept eingeführt werden, das nicht in der Praxis relevant ist. Das Buch kann selbstverständlich abseits des didaktischen Konzepts verwendet werden. Ich habe beim Verfassen darauf geachtet, das jedes Kapitel in sich geschlossen ist und einzeln gelesen und bearbeitet werden kann. Das gilt auch für die Übungen für die Anwendung mit R. "],["die-arbeitsumgebung.html", "Kapitel 1 Die Arbeitsumgebung TL;DR 1.1 R installieren 1.2 RStudio installieren 1.3 Überblick über RStudio", " Kapitel 1 Die Arbeitsumgebung TL;DR Für die Arbeit mit R benötigen wir eine Installation von R auf unserem Computer. R ist für alle Betriebssysteme verfügbar. Mit R bekommen wir auch eine einfache grafische Benutzeroberfläche (RGui) mitgeliefert. Diese bietet aber wenig Funktionen. Mit dem kostenlosen RStudio bekommen wir eine vollwertige integrierte Entwicklungsumgebung (IDE) für die Arbeit R. 1.1 R installieren R ist eine Open-Source-Software und für alle gängigen Betriebssysteme verfügbar. Ladet euch zunächst die neueste Version von R für euer Betriebssystem herunter und installiert es anschließend: R für Windows R für macOS R für Linux Neben der Sprache und dem Interpreter für R erhaltet ihr mit der Installation auch eine rudimentäre grafische Oberfläche mit dem Namen RGui (GUI = Graphical User Interface). Diese besteht aus einer einfachen Konsole, über die ihr R-Befehle eingeben und ausführen könnt. Figure 1.1: Die RGui bietet einen rudimentären Editor für R-Befehle. Erweiterte Funktionen wie Autovervollständigung beim Schreiben von R-Code, ein integrierter Debugger für die Fehlersuche, eine Echtzeit-Vorschau für R-Markdown und viele andere Features mehr bietet dieses einfache Tool nicht. Deshalb verwenden wir für die Arbeit mit R nicht die RGui, sondern das ebenfalls kostenlos nutzbare RStudio. 1.2 RStudio installieren Das RStudio ist das Standardwerkzeug für die Arbeit mit R und bietet dafür viele nützliche Funktionen. Das RStudio ist ein sogenanntes Integrated Development Environment (IDE) für R. Einen schnellen Überblick über die grafische Benutzeroberfläche findet ihr in dem offiziellen RStudio Cheatsheet. Klickt auf den Link unten und wählt RStudio für euer Betriebssystem aus. Installiert RStudio und öffnet es: RStudio herunterladen Nach dem Öffnen seht ihr die Oberfläche des RStudio, die wie auf dem Screenshot unten aussieht: Figure 1.2: Das RStudio ist in vier Bereiche eingeteilt. 1.3 Überblick über RStudio Das Werkzeug besteht in der Standardansicht aus vier Bereichen (s. Screenshot oben): 1.3.1 Der Skripteditor Der wichtigste Bereich ist der Skripteditor. Hier schreiben wir unseren R-Code und speichern ihn in Dateien auf unserem Computer. Dabei unterstützt uns RStudio mit vielen nützlichen Funktionen. Wir können in RStudio unterschiedliche Arten von Dateien verwenden, um unsere Skripte zu speichern. Die einfachste Art sind sogenannte R-Skripte mit der Dateiendung .R. Wenn wir nicht nur R-Code, sondern auch Visualisierungen und formatierten Text in einem Dokument verwenden und anzeigen wollen, bietet sich die Verwendung eines R-Notebooks an. Eine R-Notebook-Datei endet auf .Rmd (R-Markdown) und wir können neben R-Code auch Markdown verwenden. Über Markdown lernen wir zu einem späteren Zeitpunkt mehr. 1.3.2 Informationen zur aktuellen R-Umgebung R erstellt für die Ausführung von Skripten eine sogenannte Session. In einer Session werden alle Objekte, wie die momentan verwendeten Daten, eigene Variablen oder Funktionen, im Arbeitsspeicher des lokalen Rechners gespeichert. In dem zweiten Fenster können im Tab Environment alle Objekte, die es in der aktuellen Session gibt, in der Übersicht und im Detail betrachtet werden. Der History Tab enthält eine Liste aller ausgeführten Befehle in der aktuellen Session. Daneben gibt es noch den Connections Tab für die Verbindung zu unterschiedlichen Datenquellen, wie Datenbanken oder Webservices, sowie den Tutorial Tab, in dem direkt in RStudio unterschiedliche Anleitungen angezeigt werden können. {% hint style=info %} Für die Anzeige von Tutorials direkt in RStudio muss das Paket learnr installiert werden. Ihr müsst der Installation einmalig zustimmen und das Paket installieren. {% endhint %} 1.3.3 Konsole und Terminal Die Konsole ermöglicht, R-Befehle einzugeben und mit der Taste Enter auszuführen. Die Konsole in RStudio ist fast identisch zu der RGui. Für das schnelle Ausprobieren von Befehlen kann die Konsole nützlich sein. Für die strukturierte Arbeit mit den Daten sollten wir aber den Skripteditor verwenden, weil wir dort unsere Arbeit speichern und mit Kommentaren versehen können. 1.3.4 Dateien, Vorschau und Plots In diesem Bereich werden Vorschauen unterschiedlicher Artefakte angezeigt. Dazu gehören gerenderte R-Notebooks, Markdown, aber auch Visualisierungen. In diesem Bereich gibt es auch einen rudimentären Datei-Explorer, um Dateien wie Skripte oder Datendateien zu finden und von dort zu öffnen. "],["einen-datensatz-laden.html", "Kapitel 2 Einen Datensatz laden TL;DR 2.1 Tabellarische Daten in R 2.2 Das CSV-Format 2.3 CSV-Daten laden", " Kapitel 2 Einen Datensatz laden Nachdem die Arbeitsumgebung eingerichtet ist, können wir mit den ersten Schritten in R beginnen. Wir steigen direkt ein und lernen, wie wir mit Daten in R arbeiten. TL;DR R bietet verschiedene Möglichkeiten, um mit Daten zu arbeiten. Für strukturierte Daten in Tabellenform (Zeilen und Spalten) verwenden wir in R den Dataframe. Eine modernere Version des klassischen Dataframe ist das Tibble aus dem Tidyverse. 2.1 Tabellarische Daten in R 2.1.1 Der Dataframe In R gibt es verschiedene Strukturen für die Speicherung von Daten. Darunter sind beispielsweise Vektoren, Listen oder Matritzen. Um tabellarische Daten abzubilden, die in Spalten und Zeilen organisiert sind, verwenden wir in R den sogenannten Dataframe. 2.1.2 Tibbles Der Tibble ist eine Weiterentwicklung des klassischen Dataframe in R. Tibbles werden im Tidyverse standardmäßig verwendet und mit dem Paket tibble eingeführt. 2.2 Das CSV-Format In den meisten Fällen erzeugen wir einen Dataframe oder Tibble, indem wir einen Datensatz aus einer Datenquelle laden. Häufig ist die Quelle eine einfache Texdatei, in der Daten zeilenweise gespeichert sind und jede Zeile aus mehreren einzelnen Werten besteht, die durch ein bestimmtes Trennzeichen voneinander getrennt sind. Wenn die Werte mit einem Komma voneinander getrennt sind, nennt man das Format CSV. CSV steht für Comma Separated Values, was auf Deutsch so viel wie Durch Kommata getrennte Werte bedeutet. Unten seht ihr ein Beispiel für Daten im CSV-Format. id,firstname,lastname 1,Boris,Becker 2,Steffi,Graf 3,Rafael, Nadal Die erste Zeile nennen wir auch Kopfzeile oder Header. Sie beinhaltet die Spaltennamen. Jede nachfolgende Zeile stellt einen Datensatz oder Record dar. Dabei müssen die Werte in jeder Zeile mit Komma getrennt in der selben Reihenfolge wie im Header aufgeführt werden. Nur so ist eindeutig erkennbar, welcher Wert zu welcher Spalte gehört. Manchmal fehlen Werte für eine bestimmte Spalte. In diesem Fall werden einfach zwei (oder mehrere) Kommata hintereinander gesetzt. id,firstname,lastname,height,weight,gender 1,Boris,Becker,,,male 2,Steffi,Graf,175,64,female 3,Rafael,Nadal,185,,male 2.3 CSV-Daten laden library(readr) food_production &lt;- read_csv(&quot;food_production.csv&quot;) "],["einen-datensatz-erkunden.html", "Kapitel 3 Einen Datensatz erkunden TL;DR 3.1 Alle Daten anzeigen 3.2 Spaltenamen ermitteln 3.3 Schnelle Übersicht der Spalten, Datentypen und Werte 3.4 Anzahl Spalten und Zeilen ermitteln 3.5 Wertebereich von Spalten bestimmen 3.6 Erste oder letzte Zeilen anzeigen", " Kapitel 3 Einen Datensatz erkunden TL;DR In RStudio können wir mit view den gesamten Dataframe oder Tibble im Skripteditor anzeigen. Die Spaltennamen eines Tibble erhalten wir mit colnames. Mit glimpse können wir einen Überblick der Spalten und enthaltenen Werte anzeigen. Mit ncol und nrow erhalten wir die Anzahl Spalten und Zeilen eines Tibbles. Das Gleiche bekommen wir in einem Schwung mit der Funktion dim. Einen schnellen Überblick über eine nominalskalierte Spalte und deren Werte bekommen wir mit distinct (eindeutige Werte) oder count (zusätzlich die Häufigkeiten). Für intervallskalierte Werte können wir besser mit min und max die Spannweite ermitteln oder mit einem Histogramm die Verteilung der Werte visualisieren. Mit is.na können wir prüfen, ob ein Wert NA ist (nicht vorhanden) und so auch die Anzahl fehlender Werte ermitteln. Mit der summary Funktion erzeugen wir eine Übersicht wichtiger statistischer Kennzahlen für eine Spalte. Mit head und tail erhalten wir die ersten oder letzten 10 Zeilen eines Tibble. Mit dem einzigen Parameter der Funktion können wir auch eine andere Anzahl zurückgeben. 3.1 Alle Daten anzeigen Oft ist es hilfreich, einen schnellen Blick in einen Datensatz zu werfen, um beispielsweise die Werte einer Spalte zu überprüfen. Dafür können wir in RStudio die Funktion view() verwenden. Der Funktion übergeben wir den Tibble pokemon: view(pokemon) Mit  Strg + Enter oder über den Button Run in der rechten oberen Ecke des Skriptfensters führen wir die Zeile aus. Es öffnet sich ein neuer Tab mit einer tabellarischen Ansicht der Daten. Figure 3.1: Die Anzeige eines Tibbles in RStudio mit view. 3.2 Spaltenamen ermitteln Um mit einem Datensatz arbeiten zu können, benötigen wir eine Übersicht über seine Spalten. Diese liefert und die Funktion colnames: pokemon %&gt;% colnames() ## [1] &quot;abilities&quot; &quot;against_bug&quot; &quot;against_dark&quot; ## [4] &quot;against_dragon&quot; &quot;against_electric&quot; &quot;against_fairy&quot; ## [7] &quot;against_fight&quot; &quot;against_fire&quot; &quot;against_flying&quot; ## [10] &quot;against_ghost&quot; &quot;against_grass&quot; &quot;against_ground&quot; ## [13] &quot;against_ice&quot; &quot;against_normal&quot; &quot;against_poison&quot; ## [16] &quot;against_psychic&quot; &quot;against_rock&quot; &quot;against_steel&quot; ## [19] &quot;against_water&quot; &quot;attack&quot; &quot;base_egg_steps&quot; ## [22] &quot;base_happiness&quot; &quot;base_total&quot; &quot;capture_rate&quot; ## [25] &quot;classfication&quot; &quot;defense&quot; &quot;experience_growth&quot; ## [28] &quot;height_m&quot; &quot;hp&quot; &quot;japanese_name&quot; ## [31] &quot;name&quot; &quot;percentage_male&quot; &quot;pokedex_number&quot; ## [34] &quot;sp_attack&quot; &quot;sp_defense&quot; &quot;speed&quot; ## [37] &quot;type1&quot; &quot;type2&quot; &quot;weight_kg&quot; ## [40] &quot;generation&quot; &quot;is_legendary&quot; Auf diese Information greifen wir zurück, wenn wir später Analysen mit dem Datensatz durchführen oder bestimmte Spalten genauer untersuchen wollen. 3.3 Schnelle Übersicht der Spalten, Datentypen und Werte glimpse(pokemon) ## Rows: 801 ## Columns: 41 ## $ abilities &lt;chr&gt; &quot;[&#39;Overgrow&#39;, &#39;Chlorophyll&#39;]&quot;, &quot;[&#39;Overgrow&#39;, &#39;Chloro~ ## $ against_bug &lt;dbl&gt; 1.00, 1.00, 1.00, 0.50, 0.50, 0.25, 1.00, 1.00, 1.00~ ## $ against_dark &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~ ## $ against_dragon &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~ ## $ against_electric &lt;dbl&gt; 0.5, 0.5, 0.5, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.~ ## $ against_fairy &lt;dbl&gt; 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.~ ... 3.4 Anzahl Spalten und Zeilen ermitteln Einfache Informationen wie die Anzahl Spalten und Zeilen ermitteln wir mit den Funktionen ncol, nrow oder dim. pokemon %&gt;% ncol() ## [1] 41 pokemon %&gt;% nrow() ## [1] 801 Wenn wir beide Werte in einer Ausgabe haben wollen können wir dim verwenden: pokemon %&gt;% dim() ## [1] 801 41 dim gibt einen Vektor mit zwei Werten zurück. Der erste Wert steht für die Anzahl Zeilen, der zweite für die Anzahl Spalten. Wir können mit der Angabe der Position in eckigen Klammern auf jeden Wert einzeln zugreifen: dimensions &lt;- pokemon %&gt;% dim() # Anzahl Zeilen dimensions[1] ## [1] 801 Und auf die Spalten: # Anzahl Spalten dimensions[2] ## [1] 41 3.5 Wertebereich von Spalten bestimmen 3.5.1 Nominalskalierte Spalten 3.5.1.1 Eindeutige Werte mit distinct Für nominalskalierte Spalten kann es interessant sein, alle Werte und eventuell deren Häufigkeit anzuzeigen. Die eindeutigen Werte bekommen wir mit der distinct Funktion: pokemon %&gt;% distinct(type2) ## # A tibble: 19 x 1 ## type2 ## &lt;chr&gt; ## 1 poison ## 2 &lt;NA&gt; ## 3 flying ## 4 dark ## 5 electric ... 3.5.1.2 Eindeutige Werte und deren Häufigkeiten Wenn wir zusätzlich noch die Häufigkeiten ermitteln wollen, können wir die Funktion count verwenden und als Parameter den Spaltennamen übergeben: pokemon %&gt;% count(type1) ## # A tibble: 18 x 2 ## type1 n ## &lt;chr&gt; &lt;int&gt; ## 1 bug 72 ## 2 dark 29 ## 3 dragon 27 ## 4 electric 39 ## 5 fairy 18 ... Meist es nützlich, direkt nach Häufigkeiten zu sortieren: pokemon %&gt;% count(type1, sort = TRUE) ## # A tibble: 18 x 2 ## type1 n ## &lt;chr&gt; &lt;int&gt; ## 1 water 114 ## 2 normal 105 ## 3 grass 78 ## 4 bug 72 ## 5 psychic 53 ... 3.5.2 Intervallskalierte Spalten Für intervallskalierte Spalten, also Spalten mit Zahlenwerten, eignen sich die Funktionen distinct und count nur bedingt. Oft sind es zu viele unterschiedliche Werte und das reine Zählen bringt nicht viel Aufschluss. Wenn wir distinct auf die Spalte weight_kg anwenden, erhalten wir zum Beispiel 422 unterschiedliche Werte: pokemon %&gt;% distinct(weight_kg) ## # A tibble: 422 x 1 ## weight_kg ## &lt;dbl&gt; ## 1 6.9 ## 2 13 ## 3 100 ## 4 8.5 ## 5 19 ## 6 90.5 ## 7 9 ## 8 22.5 ## 9 85.5 ## 10 2.9 ## # ... with 412 more rows In diesem Fall ist es sinnvoller, den kleinsten und größten Wert zu kennen, um die Spannweite der Spalte zu ermitteln. Interessant wäre auch die Verteilung der Werte, etwa in Form eines Histogramm. 3.5.2.1 Größter und kleinster Wert Den größten oder kleinsten Wert können wir mit max und min ermitteln: pokemon %&gt;% select(weight_kg) %&gt;% max(na.rm = TRUE) ## [1] 999.9 pokemon %&gt;% select(weight_kg) %&gt;% min(na.rm = TRUE) ## [1] 0.1 Wir wissen also, dass die Werte sich zwischen 0,1 und 999,9 bewegen. Wie aber sind die Werte dazwischen verteilt? 3.5.2.2 Verteilung der Werte als Histogramm Um die Verteilung der Werte innerhalb der Spalte weight_kg sinnvoll zu ermitteln müssen wir an dieser Stelle einen Exkurs in die Visualisierung von Daten machen: pokemon %&gt;% select(weight_kg) %&gt;% filter(!is.na(weight_kg)) %&gt;% ggplot() + aes(x = weight_kg) + geom_histogram(bins = 50) Das Historgramm zeigt uns, dass der größte Teil der Daten im kleineren Bereich liegt und nur wenige Ausnahmen große Werte jenseits der 300 aufweisen. 3.5.2.3 Anzahl fehlender Werte Die Anzahl fehlender Werte, die in R als NA dargestellt werden, ist ein wichtiges Merkmal für die Qualität der Daten einer Spalte. Um diese Zahl zu ermitteln filtern wir die Daten mit der Funktion is.na und zählen anschließend die übrig gebliebenen Werte: pokemon %&gt;% select(weight_kg) %&gt;% filter(is.na(weight_kg)) %&gt;% count() ## # A tibble: 1 x 1 ## n ## &lt;int&gt; ## 1 20 Insgesamt haben somit 20 Pokémon keine Gewichtsangabe. 3.5.2.4 Zusammenfassung einer Spalte ausgeben Um gleich mehrer statistische Größen zu berechnen und auszugeben können wir die Funktion summary verwenden: pokemon %&gt;% select(weight_kg) %&gt;% summary() ## weight_kg ## Min. : 0.10 ## 1st Qu.: 9.00 ## Median : 27.30 ## Mean : 61.38 ## 3rd Qu.: 64.80 ## Max. :999.90 ## NA&#39;s :20 3.6 Erste oder letzte Zeilen anzeigen Die Funktion head gibt die ersten 10 Zeilen eines Tibbles zurück: pokemon %&gt;% head() ## # A tibble: 6 x 41 ## abilities against_bug against_dark against_dragon against_electric ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 [&#39;Overgrow&#39;, &#39;Chloro~ 1 1 1 0.5 ## 2 [&#39;Overgrow&#39;, &#39;Chloro~ 1 1 1 0.5 ## 3 [&#39;Overgrow&#39;, &#39;Chloro~ 1 1 1 0.5 ## 4 [&#39;Blaze&#39;, &#39;Solar Pow~ 0.5 1 1 1 ## 5 [&#39;Blaze&#39;, &#39;Solar Pow~ 0.5 1 1 1 ## 6 [&#39;Blaze&#39;, &#39;Solar Pow~ 0.25 1 1 2 ## # ... with 36 more variables: against_fairy &lt;dbl&gt;, against_fight &lt;dbl&gt;, ## # against_fire &lt;dbl&gt;, against_flying &lt;dbl&gt;, against_ghost &lt;dbl&gt;, ## # against_grass &lt;dbl&gt;, against_ground &lt;dbl&gt;, against_ice &lt;dbl&gt;, ## # against_normal &lt;dbl&gt;, against_poison &lt;dbl&gt;, against_psychic &lt;dbl&gt;, ## # against_rock &lt;dbl&gt;, against_steel &lt;dbl&gt;, against_water &lt;dbl&gt;, attack &lt;dbl&gt;, ## # base_egg_steps &lt;dbl&gt;, base_happiness &lt;dbl&gt;, base_total &lt;dbl&gt;, ## # capture_rate &lt;chr&gt;, classfication &lt;chr&gt;, defense &lt;dbl&gt;, ... Über den Parameter der Funktion können wir die Anzahl der Zeilen verändern, um etwa nur die erste Zeile zu erhalten: pokemon %&gt;% head(1) Die Funktion tail ist das Pendant dazu und gibt die 10 letzten Zeilen aus. Genau wie bei der head() Funktion können wir den Parameter für die Angabe der konkreten Anzahl Zeilen verwenden: pokemon %&gt;% tail(1) "],["der-werkzeugkasten.html", "Kapitel 4 Der Werkzeugkasten 4.1 Das Paket tibble 4.2 Das Paket readr 4.3 Das Paket dplyr 4.4 Das Paket ggplot2", " Kapitel 4 Der Werkzeugkasten Bei der Arbeit mit Daten ist es wichtig zu wissen, welches Werkzeug (hier: R-Paket oder Funktion) wir für welche Aufgabe verwenden. Genauso wie in einer Werkstatt, in der es eine Vielzahl an Werkzeugen gibt, die für unterschiedliche Zwecke geeignet sind. Figure 4.1: Verschiedene Werkzeuge für unterschiedliche Aufgaben. Die Tabelle unten listet wichtige Werkzeuge auf, die wir im weiteren Verlauf dieses Buches kennenlernen werden. Paket Funktion Aufgabe tibble as.tibble Erstellt einen modernen Dataframe für tabellarische Daten. readr read_csv Lesen von tabellarischen Datenformaten wie CSV-Dateien. dplyr select Auswählen von Spalten (Variablen) eines Datensatzes. dplyr filter Filtern von Daten auf Basis fast beliebiger Ausdrücke. dplyr mutate Hinzufügen neuer Spalten (Variablen). dplyr recode Spaltenwerte neu kodieren. dplyr arrange Die Reihenfolge von Zeilen verändern. dplyr group_by Gruppieren von Daten. dplyr summarise Zusammenfassen von Daten. ggplot2 ggplot, aes, geom_line, geom_bar, geom_col geom_point u.v.m. Visualisieren von Daten. 4.1 Das Paket tibble Das Paket tibble führt das moderne Pendant zum klassischen Dataframe in R ein. Zur offiziellen Webseite des tibble Pakets 4.2 Das Paket readr Das Paket readr beinhaltet Funktionen für das Laden von Daten aus strukturierten Datenformaten wie CSV-Dateien. Alle Funktionen zum Datenimport aus readr erzeugen automatisch einen tibble. Zur offiziellen Webseite des readr Pakets 4.3 Das Paket dplyr Das Paket dplyr hat einen etwas merkwürdigen Namen. Er setzt sich aus dem Buchstaben d und dem abgekürzten Wort plyr zusammen. Das d steht für Dataframe, während plyr für den englischen Begriff plier steht, was auf Deutsch Zange bedeutet. Passend dazu bildet das offizielle Symbol des Pakets mehrere Zangen ab. Zur offiziellen Dokumentation des dplyr Pakets dplyr liefert uns eine Vielzahl wichtiger Funktionen für die Manipulation von Daten, die in Form eines Tibble vorliegen. Eine Übersicht der Funktionen findet ihr in dem Cheat Sheet Data Transformation wit dplyr. 4.4 Das Paket ggplot2 ggplot2 ist eines der umfassendsten Pakete für die professionelle Visualisierung von Daten mit R: Zur offiziellemn Dokumentation des ggplot2 Pakets Das Cheat Sheet Data Visualization with ggplot2 beinhaltet alle wichtigen Funktionen im Überblick. "],["der-explorative-analyseprozess.html", "Kapitel 5 Der explorative Analyseprozess 5.1 Daten laden 5.2 Daten transformieren 5.3 Daten visualisieren 5.4 Literatur", " Kapitel 5 Der explorative Analyseprozess Dieser Abschnitt führt euch in die Grundlagen der explorativen Datenanalyse mit R ein. In der explorativen Datenanalyse versuchen wir einen unbekannten Datensatz mit geeigneten Verfahren kennenzulernen und schnell Muster in den Daten zu erkennen. Auf Basis dieser Muster formulieren wir Hypothesen. Diese Hypothesen können anschließend mit statistischen Modellen aus dem Bereich der schließenden Statistik auf ihre Gültigkeit überprüft werden. Die statistische Überprüfung ist jedoch nicht Teil der explorativen Datenanalyse nach dem Verständnis dieses Buches. Eine ausgezeichnete Einführung in die explorative Datenanalyse mit R gibt auch das Buch R for Data Science von Wickham and Grolemund (2016). Das Buch ist online frei zugänglich. Figure 5.1: Der Datenanalyseprozess. Wickham and Grolemund (2016) definieren den Datenanalyseprozess durch eine Abfolge bestimmter Schritte, wie in der Abbildung gezeigt. In diesem Abschnitt stehen die rot markierten Schritte im Fokus. 5.1 Daten laden Jeder Analyseprozess beginnt mit dem Laden eines Datensatzes. Dabei gibt es verschiedene Datenquellen, die in Betracht gezogen werden müssen. Ein häufig verwendetes Format sind Komma-separierte Werte (Comma Separated Values = CSV) in einfachen Textdateien. Dieses Format steht auch hier im Vordergrund. Gemäß der Abbildung aus Wickham and Grolemund (2016) folgt auf das Laden der Daten der Arbeitsschritt Tidy. Dieser ist dann notwendig, wenn die Daten nicht in der typischen Form bestehend aus Spalten und Zeilen vorliegen. Leider ist das in der Praxis oft der Fall. In diesem Buch wird aber zunächst davon ausgegangen, dass die Daten das entsprechende Format aufweisen. Die interessierte Leserin verweise ich auf das Kapitel 12 im Buch R for Data Science. 5.2 Daten transformieren Das Ziel der explorativen Datenanalyse ist die Visualisierung der Daten mit geeigneten Diagrammen, um interessante Muster sichtbar werden zu lassen. Visualisierungen benötigen häufig nur einen Teil der Daten (wenige Spalten oder bestimmte Zeilen). Auch müssen wir oft neue Spalten berechnen oder bestehende Daten aggregieren, bevor wir sie visualisieren können. Alle diese Aufgaben können wir unter dem Bereich der Datentransformation zusammenfassen. Für diese Aufgaben bietet R mit dem Paket dplyr mächtige Funktionen. Insbesondere lernen wir in dem Abschnitt: Wie wir bestimmte Spalten auswählen können (dplyr-Verb: select). Wie wir Zeilen fast beliebig filtern können (dplyr-Verb: filter). Wie wir neue, berechnete Spalten hinzufügen können (dplyr-Verb: mutate). Wie wir Zeilen sortieren können (dplyr-Verb: arrange). Wie wir Zeilen zusammenfassen und gruppieren können (dplyr-Verben: summarize und group_by) 5.3 Daten visualisieren Das wichtigste Werkzeug in der explorativen Datenanalyse ist die Visualisierung von Daten. In R steht uns dafür mit ggplot2 ein leistungsfähiges Instrument zur Verfügung. Wir lernen für bestimmte Anwendungsfälle die richtigen Visualisierungen zu identifizieren und mit ggplot2 umzusetzen. 5.4 Literatur 5.4.1 Bücher Wickham, Hadley, and Garrett Grolemund. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. First edition, OReilly, 2016. Online verfügbar: https://r4ds.had.co.nz/ Wickham, Hadley. ggplot2. Springer Science+Business Media, LLC, 2016. Online verfügbar: https://ggplot2-book.org/ Kabacoff, Robert. R in Action: Data Analysis and Graphics with R. Second edition, Manning, 2015. Sauer, Sebastian. Moderne Datenanalyse mit R: Daten einlesen, aufbereiten, visualisieren, modellieren und kommunizieren. Springer Gabler, 2019. Online verfügbar: https://link.springer.com/book/10.1007/978-3-658-21587-3 5.4.2 Online-Dokumentationen Die offizielle Dokumentation der Tidyverse-Bibliotheken Ein Tutorial für die Einführung in R mit RStudio Ein Tutorial zu den Grundlagen der Datenmanipulation mit R, tidyr und dplyr Weiterführende Anleitungen zur Datenmanipulation mit dplyr (Efficient Data Manipulation) Weiterführende Anleitungen zur Datenmanipulation mit dplyr (Advanced Data Manipulation) Literaturverzeichnis "],["spalten-auswählen-mit-select.html", "Kapitel 6 Spalten auswählen mit select TL;DR 6.1 Beispieldaten: Pokémon 6.2 Bestimmte Spalten nach Namen auswählen 6.3 Spalten aus der Auswahl ausschließen 6.4 Die letzte oder n-letzten Spalten auswählen 6.5 Spalten nach Datentyp selektieren 6.6 Spaltenmengen definieren und selektieren 6.7 Weitere Online-Quellen", " Kapitel 6 Spalten auswählen mit select TL;DR Mit dem select Befehl können wir aus allen Spalten einer Tabelle eine Untermenge auswählen. Neben einer Liste von gewünschten Spaltennamen können wir die Untermenge auch über den Ausschluss von nicht gewollten Spalten eingrenzen. Dafür verwenden wir das Zeichen - vor dem Spaltennamen. Mit der Funktion last_col() können wir die letzte oder die n-letzte Spalte auswählen Mit dem Semikolon können wir Spaltenbereiche auswählen und so beispielsweise alle Spalten von der 5. bis zur vorletzten selektieren (select(5 : last_col(2))). Wir können Spalten anhand ihres Datentyps selektieren (is.numeric, is.character, etc.). Wir können Spalten über die Zugehörigkeit zu einer Liste selektieren (all_of, any_of). 6.1 Beispieldaten: Pokémon Es ist ratsam die verfügbaren Spalten eines Datensatzes zu kennen, bevor wir uns mit einigen Beispielen beschäftigen, wie wir Bestimmte davon auswählen können. Für dieses Kapitel verwenden wir den Pokémon-Datensatz, der auf Kaggle.com bereitgestellt wird. pokemon &lt;- read_csv(&quot;datasets/pokemon.csv&quot;) Nach dem Laden des Datensatzes lassen wir uns mit colnames() die Spalten anzeigen: pokemon %&gt;% colnames() ## [1] &quot;abilities&quot; &quot;against_bug&quot; &quot;against_dark&quot; ## [4] &quot;against_dragon&quot; &quot;against_electric&quot; &quot;against_fairy&quot; ## [7] &quot;against_fight&quot; &quot;against_fire&quot; &quot;against_flying&quot; ## [10] &quot;against_ghost&quot; &quot;against_grass&quot; &quot;against_ground&quot; ## [13] &quot;against_ice&quot; &quot;against_normal&quot; &quot;against_poison&quot; ## [16] &quot;against_psychic&quot; &quot;against_rock&quot; &quot;against_steel&quot; ## [19] &quot;against_water&quot; &quot;attack&quot; &quot;base_egg_steps&quot; ## [22] &quot;base_happiness&quot; &quot;base_total&quot; &quot;capture_rate&quot; ## [25] &quot;classfication&quot; &quot;defense&quot; &quot;experience_growth&quot; ## [28] &quot;height_m&quot; &quot;hp&quot; &quot;japanese_name&quot; ## [31] &quot;name&quot; &quot;percentage_male&quot; &quot;pokedex_number&quot; ## [34] &quot;sp_attack&quot; &quot;sp_defense&quot; &quot;speed&quot; ## [37] &quot;type1&quot; &quot;type2&quot; &quot;weight_kg&quot; ## [40] &quot;generation&quot; &quot;is_legendary&quot; Das sind mehr als 40 Spalten. Wie viele genau? pokemon %&gt;% dim() ## [1] 801 41 Oder mit ncol(): pokemon %&gt;% ncol() ## [1] 41 Es sind also 41 Spalten. Genug um die wichtigsten Funktionen für das Auswählen von Spalten zu zeigen. 6.2 Bestimmte Spalten nach Namen auswählen Die Funktion select verwenden wir für das Auswählen einer Untermenge an Spalten. Wir können im einfachsten Fall einfach die gewünschten Spalten mit Kommata getrennt auflisten: pokemon %&gt;% select(name, type1) ## # A tibble: 801 x 2 ## name type1 ## &lt;chr&gt; &lt;chr&gt; ## 1 Bulbasaur grass ## 2 Ivysaur grass ## 3 Venusaur grass ## 4 Charmander fire ## 5 Charmeleon fire ## 6 Charizard fire ## 7 Squirtle water ## 8 Wartortle water ## 9 Blastoise water ## 10 Caterpie bug ## # ... with 791 more rows Dabei können wir beliebig viele Spalten in die Liste aufnehmen: pokemon %&gt;% select(name, type1, type2, is_legendary) ## # A tibble: 801 x 4 ## name type1 type2 is_legendary ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Bulbasaur grass poison 0 ## 2 Ivysaur grass poison 0 ## 3 Venusaur grass poison 0 ## 4 Charmander fire &lt;NA&gt; 0 ## 5 Charmeleon fire &lt;NA&gt; 0 ## 6 Charizard fire flying 0 ## 7 Squirtle water &lt;NA&gt; 0 ## 8 Wartortle water &lt;NA&gt; 0 ## 9 Blastoise water &lt;NA&gt; 0 ## 10 Caterpie bug &lt;NA&gt; 0 ## # ... with 791 more rows 6.3 Spalten aus der Auswahl ausschließen Wollen wir fast alle verfügbaren Spalten auswählen, so ist es effizienter, die Spalten zu nennen, die wir ausschließen wollen. Das können wir mit dem Minus-Symbol erreichen: pokemon %&gt;% select(-is_legendary) 6.4 Die letzte oder n-letzten Spalten auswählen pokemon %&gt;% select(last_col()) ## # A tibble: 801 x 1 ## is_legendary ## &lt;dbl&gt; ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ## 7 0 ## 8 0 ## 9 0 ## 10 0 ## # ... with 791 more rows 6.5 Spalten nach Datentyp selektieren Manchmal möchten wir Spalten nach ihrem Datentyp auswählen. Für die Prüfung, ob eine Spalte oder ein Wert einem bestimmten Datentyp entspricht, gibt es Funktionen in R: is.numeric prüft, ob eine Spalte oder ein Wert numerisch ist. is.character prüft, ob es sich um eine alphanumerische Spalte handelt (Zeichenketten oder Strings). is.logical prüft, ob es sich um eine Spalte mit Wahrheitswerten handelt (Boolscher Datentyp). is.factor prüft, ob es sich bei einer Spalte um einen Faktor mit einer fest definierten Anzahl von Ausprägungen handelt. Um beispielsweise alle numersichen Spalten im Pokémon-Datensatz auszuwählen, können wir den folgenden Aufruf verwenden: pokemon %&gt;% select(where(is.numeric)) ## # A tibble: 801 x 34 ## against_bug against_dark against_dragon against_electric against_fairy ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 1 0.5 0.5 ## 2 1 1 1 0.5 0.5 ## 3 1 1 1 0.5 0.5 ## 4 0.5 1 1 1 0.5 ## 5 0.5 1 1 1 0.5 ## 6 0.25 1 1 2 0.5 ## 7 1 1 1 2 1 ## 8 1 1 1 2 1 ## 9 1 1 1 2 1 ## 10 1 1 1 1 1 ## # ... with 791 more rows, and 29 more variables: against_fight &lt;dbl&gt;, ## # against_fire &lt;dbl&gt;, against_flying &lt;dbl&gt;, against_ghost &lt;dbl&gt;, ## # against_grass &lt;dbl&gt;, against_ground &lt;dbl&gt;, against_ice &lt;dbl&gt;, ## # against_normal &lt;dbl&gt;, against_poison &lt;dbl&gt;, against_psychic &lt;dbl&gt;, ## # against_rock &lt;dbl&gt;, against_steel &lt;dbl&gt;, against_water &lt;dbl&gt;, attack &lt;dbl&gt;, ## # base_egg_steps &lt;dbl&gt;, base_happiness &lt;dbl&gt;, base_total &lt;dbl&gt;, ## # defense &lt;dbl&gt;, experience_growth &lt;dbl&gt;, height_m &lt;dbl&gt;, hp &lt;dbl&gt;, ... Der where Funktion können wir eine Funktion übergeben, die in Bezug auf eine Spalte wahr oder falsch zurückliefert. Leider existiert keine Standardfunktion, um Spalten auf den Datentyp date zu prüfen. Wir können uns diese aber einfach selbst schreiben: # Funktion, um Datumsspalten zu erkennen is.date &lt;- function(x) { inherits(x, c(&quot;Date&quot;, &quot;POSIXt&quot;)) } pokemon %&gt;% select(where(is.date)) ## # A tibble: 801 x 0 Für den Pokémon-Datensatz ist das Ergebnis leer, das heißt es existiert keine Spalte vom Typ Datum. 6.6 Spaltenmengen definieren und selektieren Häufig benötigt man in unterschiedlichen Abfragen die gleichen Spalten. Um nicht jedes Mal die gesamte Liste aufführen zu müssen, können wir in diesem Fall einen Vektor definieren, der die Namen der Spalten enthält. Mit der all_of Funktion können wir dann alle Spalten in diesem Vektor auswählen: # Erstellen eines Vektors mit gewünschten Spaltennamen vars &lt;- c(&quot;name&quot;, &quot;type1&quot;, &quot;type2&quot;) # Selektieren auf Basis dieser Menge pokemon %&gt;% select(all_of(vars)) ## # A tibble: 801 x 3 ## name type1 type2 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Bulbasaur grass poison ## 2 Ivysaur grass poison ## 3 Venusaur grass poison ## 4 Charmander fire &lt;NA&gt; ## 5 Charmeleon fire &lt;NA&gt; ... Wir können bei Bedarf auch einzelne Elemente der Menge über den Minus-Operator ausschließen: # Selektieren auf Basis dieser Menge, aber ohne &quot;type2&quot; pokemon %&gt;% select(all_of(vars), -type2) ## # A tibble: 801 x 2 ## name type1 ## &lt;chr&gt; &lt;chr&gt; ## 1 Bulbasaur grass ## 2 Ivysaur grass ## 3 Venusaur grass ## 4 Charmander fire ## 5 Charmeleon fire ... Mit any_of können wir auch Spalten im Vektor aufnehmen, die nicht existieren. Es werden dann alle Spalten selektiert, die in der Liste vorkommen und auch tatsächlich im Tibble vorhanden sind. So können wir einen Vektor erstellen, der Spaltennamen aus unterschiedlichen Datensätzen beinhaltet: # Erstellen eines Vektors mit gewünschten Spaltennamen, &quot;type3&quot; existiert nicht im Tibble vars &lt;- c(&quot;name&quot;, &quot;type1&quot;, &quot;type2&quot;, &quot;type3&quot;) # Selektieren auf Basis dieser Menge, &quot;type3&quot; ist jedoch nicht vorhanden pokemon %&gt;% select(any_of(vars)) ## # A tibble: 801 x 3 ## name type1 type2 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Bulbasaur grass poison ## 2 Ivysaur grass poison ## 3 Venusaur grass poison ## 4 Charmander fire &lt;NA&gt; ## 5 Charmeleon fire &lt;NA&gt; ... 6.7 Weitere Online-Quellen Offizielle Dokumentation des select Befehls im Tidyverse. Kapitel 5.4 aus Wickham and Grolemund (2016) Literaturverzeichnis "],["zeilen-filtern-mit-filter.html", "Kapitel 7 Zeilen filtern mit filter TL;DR 7.1 Filtern von alphanumerischen Werten (Zeichenketten)", " Kapitel 7 Zeilen filtern mit filter TL;DR Mit dem filter Befehl können wir eine Untermenge der gesamten Zeilen eines Datensatzes auswählen. Alphanumersiche nominalskalierte Spalten können wir mit dem == Operator auf einen bestimmten Wert filtern. 7.1 Filtern von alphanumerischen Werten (Zeichenketten) 7.1.1 Filtern auf Gleichheit pokemon %&gt;% select(name, type1) %&gt;% filter(type1 == &quot;electric&quot;) ## # A tibble: 39 x 2 ## name type1 ## &lt;chr&gt; &lt;chr&gt; ## 1 Pikachu electric ## 2 Raichu electric ## 3 Magnemite electric ## 4 Magneton electric ## 5 Voltorb electric ... 7.1.2 Filtern über eine Liste von Werten pokemon %&gt;% select(name, type1) %&gt;% filter(type1 %in% c(&quot;electric&quot;, &quot;poison&quot;, &quot;fire&quot;)) ## # A tibble: 123 x 2 ## name type1 ## &lt;chr&gt; &lt;chr&gt; ## 1 Charmander fire ## 2 Charmeleon fire ## 3 Charizard fire ## 4 Ekans poison ## 5 Arbok poison ## 6 Pikachu electric ... Wenn wir die Liste im mehreren Operationen wiederverwenden wollen, können wir sie auch einmal auf einer Variable speichern und in der filter Funktion darauf zugreifen: search_types &lt;- c(&quot;electric&quot;, &quot;poison&quot;, &quot;fire&quot;) pokemon %&gt;% select(name, type1) %&gt;% filter(type1 %in% search_types) ## # A tibble: 123 x 2 ## name type1 ## &lt;chr&gt; &lt;chr&gt; ## 1 Charmander fire ## 2 Charmeleon fire ## 3 Charizard fire ## 4 Ekans poison ## 5 Arbok poison ... 7.1.3 Suchen nach dem Vorkommen eines Wertes in einem String Um einen String auf das Vorhandensein eines bestimmten Wertes zu durchsuchen können wir auf die str_detect Funktion aus dem stringr Paket zurückgreifen. stringr ist ebenfalls im Tidyverse enthalten: pokemon %&gt;% select(name) %&gt;% filter(str_detect(name, &quot;chu&quot;)) ## # A tibble: 4 x 1 ## name ## &lt;chr&gt; ## 1 Pikachu ## 2 Raichu ## 3 Pichu ## 4 Smoochum 7.1.4 Suchen nach Mustern in einem String Wir können auch nach Mustern suchen, ähnlich was der SQL-Befehl like erlaubt: library(stringr) pokemon %&gt;% select(name) %&gt;% filter(str_like(name, &#39;%chu&#39;)) ## # A tibble: 3 x 1 ## name ## &lt;chr&gt; ## 1 Pikachu ## 2 Raichu ## 3 Pichu "],["fallstudie-orangenlimonade.html", "Kapitel 8 Fallstudie Orangenlimonade 8.1 Einführung 8.2 Datensatz laden 8.3 Datensatz erkunden", " Kapitel 8 Fallstudie Orangenlimonade 8.1 Einführung In dieser Fallstudie steht der Datensatz aus der Online-Umfrage zum Kaufverhalten von Orangenlimonade im Fokus. Der Datensatz entstand am Fachgebiet Agrarmarketing von Prof. Dr. Ulrich Enneking und wurde freundlicherweise für die Verwendung in diesem Buch freigegeben. 8.2 Datensatz laden Die Daten liegen im CSV-Format vor und können somit einfach geladen werden: limo &lt;- read_csv(&quot;datasets/limonade.csv&quot;) 8.3 Datensatz erkunden Im ersten Schritt interessiert uns der Umfang der Daten, sowohl was die Anzahl der Zeilen als auch der Spalten angeht. Wir verwenden deshalb die Funktion dim: limo %&gt;% dim() ## [1] 421 272 Die erste Zahl entspricht der Anzahl Zeilen, während die zweite für die Spalten steht. Die große Anzahl Spalten fällt sofort ins Auge, was typisch für umfangreichere Fragebögen in der Marktforschung ist. Um das genauer zu verstehen, betrachten wir als nächstes die Spaltennamen: limo %&gt;% colnames() ## [1] &quot;id&quot; &quot;f1_gekauft&quot; ## [3] &quot;f1_getrunken&quot; &quot;f1_weder_noch&quot; ## [5] &quot;f2_grund_nichtkauf&quot; &quot;f3_discounter&quot; ## [7] &quot;f3_getraenkemarkt&quot; &quot;f3_kaufhaus&quot; ## [9] &quot;f3_kiosk&quot; &quot;f3_sonstige&quot; ## [11] &quot;f3_supermarkt&quot; &quot;f4_konsumhaeufigkeit&quot; ## [13] &quot;f5_flaschenzahl_025_AB&quot; &quot;f5_flaschenzahl_033_AB&quot; ## [15] &quot;f5_flaschenzahl_050_AB&quot; &quot;f5_flaschenzahl_075_AB&quot; ## [17] &quot;f5_flaschenzahl_100_AB&quot; &quot;f5_flaschenzahl_150_AB&quot; ## [19] &quot;f6_gebindeart&quot; &quot;f7_muell_einweg&quot; ## [21] &quot;f7_muellbergreduz_mehrweg&quot; &quot;f7_umweltschutz_mehrweg&quot; ## [23] &quot;f8_info_beimKauf&quot; &quot;f8_info_empfehlung&quot; ... Der Aufbau der Spaltennamen gibt Aufschluss darüber, warum der Datensatz so viele Spalten beinhaltet. Jede Frage und deren Antworten sind in mehr als einer Spalte gespeichert. Das lässt sich an der ersten Frage bereits gut zeigen. Für sie sind die Spalten f1_gekauft, f1_getrunken und f1_weder_noch reserviert. Für jede Antwortoption der Frage 1 Haben Sie in den letzten 12 Monaten Orangenlimonade gekauft oder getrunken? (Mehrfachnennung möglich) ist eine Spalte vorgesehen. Wurde die entsprechende Antwortoption angekreuzt, beinhaltet die Spalte den Wert 1. Wenn nicht, den Wert 0. Das können wir überprüfen, indem wir alle Spalten auswählen, die mit f1_ beginnen. limo %&gt;% select(starts_with(&quot;f1_&quot;)) ## # A tibble: 421 x 3 ## f1_gekauft f1_getrunken f1_weder_noch ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 0 ## 2 1 1 0 ## 3 1 1 0 ## 4 1 1 0 ## 5 0 1 0 ## 6 1 1 0 ## 7 0 1 0 ## 8 1 1 0 ## 9 1 1 0 ## 10 1 0 0 ## # ... with 411 more rows Diese Art der Speicherung ist typisch für Fragebögen in der Marktforschung. "],["datensaetze.html", "Datensätze", " Datensätze Datensätze in diesem Buch Name Download-Link Kategorie Online-Umfrage zum Kaufverhalten von Orangenlimonade Download Marktforschung Tweets ausgewählter deutscher Politiker:innen Download Soziale Medien Pokémon Download TV "],["literaturverzeichnis.html", "Literaturverzeichnis", " Literaturverzeichnis "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
